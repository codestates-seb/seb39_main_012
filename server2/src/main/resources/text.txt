1. 회사 전담

2. 고객 전담

3. 예약 --> reservation Entity 랑 @EventListener??? @Transaction???

4. API 통신 테스트

5. EC2, S3, RDS

6. enginX

7. github Action

8. API 문서화

// test code 는 선택 하기 싫은면 안해도 됩니다.

///////////////////////////////////////////////////////////////

company 가 본인의 reservation 을 확인을 하고 그후에 예약확인 버튼을 눌러서 예약 확정을 시키면 예약이 완료되어야 하는데..
reservation 테이블에 수정이 필요하다. company 수정의 주체 근데 연관 관계는 없다... 단순 인덱스만 존재함.
인덱스 정보를 가지고 예약정보를 불러온다. 그리고 빌더 패턴을 이용해서 수정을 하고 DB 최신화를 진행한다.

회사랑 예약 테이블 관계 삭제하고

서버 2개다 엔티티정보를 가지고 있는 것이 좋을 것 같다... 서버끼리 API 통신이 필요? --> 굳이? DB 공유하면 그만 아님?
서버 1개가 됬을 경우 유저 역할을 다르게 준다.......